{"version":3,"sources":["logo.svg","serviceWorker.js","index.js","App.js"],"names":["module","exports","__webpack_require__","p","d","__webpack_exports__","unregister","Boolean","window","location","hostname","match","navigator","serviceWorker","ready","then","registration","Calc","state","sumSoFar","valueShow","lastButtonType","createObject","sumSoFarVal","valueShowVal","lastButtonTypeVal","_this","roundNumber","equals","answer","eval","toString","interum","setState","operator","value","clear","number","length","substring","_this2","this","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","onClick","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.72259546.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nclass Calc extends React.Component {\n    state = {\n        sumSoFar: '',\n        valueShow: 0,\n        lastButtonType: 'equals'\n    }\n\n    createObject = (sumSoFarVal, valueShowVal, lastButtonTypeVal) => {\n        return {\n            sumSoFar: sumSoFarVal,\n            valueShow: this.roundNumber(valueShowVal),\n            lastButtonType: lastButtonTypeVal\n        }\n    }\n\n    equals = () => {\n        let answer = eval(this.state.sumSoFar).toString()\n        let interum = this.createObject(\n            answer,\n            answer,\n            'equals')\n        this.setState({\n            sumSoFar: interum.sumSoFar,\n            valueShow: interum.valueShow,\n            lastButtonType: interum.lastButtonType\n        })\n    }\n\n    operator = (value) => {\n        let interum = this.createObject(\n                        this.state.sumSoFar+value,\n                        this.state.valueShow,\n                        'operator')\n        this.setState({\n            sumSoFar: interum.sumSoFar,\n            valueShow: interum.valueShow,\n            lastButtonType: interum.lastButtonType\n        })\n    }\n\n    clear = () => {\n        this.setState({ sumSoFar: '',\n                        valueShow: '0',\n                        lastButtonType: 'equals'})\n    }\n\n    number = (value) => {\n        let interum = {}\n        if (this.state.lastButtonType === 'equals') {\n            interum = this.createObject(value,value,'number')\n        }\n        else if (this.state.lastButtonType === 'operator') {\n            interum = this.createObject(this.state.sumSoFar+value,value,'number')\n        }\n        else if (this.state.lastButtonType === 'number') {\n            interum = this.createObject(this.state.sumSoFar+value,this.state.valueShow+value,'number')\n        }\n        this.setState({\n            sumSoFar: interum.sumSoFar,\n            valueShow: interum.valueShow,\n            lastButtonType: interum.lastButtonType\n        })\n    }\n    \n    roundNumber = (value) => {\n        if(value.length > 10) {\n            return value.substring(0,14)\n        }\n        else {\n            return value\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"container\">\n                <h3 className=\"box answer\">{this.state.valueShow}</h3>\n                <h3 className=\"box clear operator\" onClick={this.clear}>clear</h3>\n                <h3 className=\"box operator\" onClick={() => this.operator('/')}>/</h3>\n                <h3 className=\"box number\" onClick={() => this.number('7')}>7</h3>\n                <h3 className=\"box number\" onClick={() => this.number('8')}>8</h3>\n                <h3 className=\"box number\" onClick={() => this.number('9')}>9</h3>\n                <h3 className=\"box operator\" onClick={() => this.operator('*')}>x</h3>\n                <h3 className=\"box number\" onClick={() => this.number('4')}>4</h3>\n                <h3 className=\"box number\" onClick={() => this.number('5')}>5</h3>\n                <h3 className=\"box number\" onClick={() => this.number('6')}>6</h3>\n                <h3 className=\"box operator\" onClick={() => this.operator('-')}>-</h3>\n                <h3 className=\"box number\" onClick={() => this.number('1')}>1</h3>\n                <h3 className=\"box number\" onClick={() => this.number('2')}>2</h3>\n                <h3 className=\"box number\" onClick={() => this.number('3')}>3</h3>\n                <h3 className=\"box operator\" onClick={() => this.operator('+')}>+</h3>\n                <h3 className=\"box zero\" onClick={() => this.number('0')}>0</h3>\n                <h3 className=\"box equals operator\" onClick={this.equals}>=</h3>\n            </div>\n        )\n    }\n}\n\nReactDOM.render(<Calc />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n/*\nbuttonArr.map (buttonVal => {\n    return <button name={buttonVal} onClick={e.target.name)}>{buttonVal}</button>\n})\nUse map on my buttons\nSplit out my components\n*/","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"],"sourceRoot":""}